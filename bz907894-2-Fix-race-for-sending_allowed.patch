From 94331b5e0226f985364ef0632fdf4d5f0d91d625 Mon Sep 17 00:00:00 2001
From: Jan Friesse <jfriesse@redhat.com>
Date: Wed, 13 Mar 2013 12:15:11 +0100
Subject: [PATCH] Fix race for sending_allowed

Sending_allowed use sync_in_process. If sync_in process is set in the
middle of sending_allowed and api->handler_fn_get, results are
unpredictable. Solution is to enlarge lock.

Signed-off-by: Jan Friesse <jfriesse@redhat.com>
Reviewed-by: Fabio M. Di Nitto <fdinitto@redhat.com>
---
 exec/coroipcs.c |    7 +++++--
 1 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/exec/coroipcs.c b/exec/coroipcs.c
index 5943046..e97a022 100644
--- a/exec/coroipcs.c
+++ b/exec/coroipcs.c
@@ -704,6 +704,8 @@ static void *pthread_ipc_consumer (void *conn)
 
 		coroipcs_refcount_inc (conn);
 
+		api->serialize_lock();
+
 		send_ok = api->sending_allowed (conn_info->service,
 			header->id,
 			header,
@@ -724,9 +726,7 @@ static void *pthread_ipc_consumer (void *conn)
 		} else 
 		if (send_ok) {
 			api->stats_increment_value (conn_info->stats_handle, "requests");
-			api->serialize_lock();
 			api->handler_fn_get (conn_info->service, header->id) (conn_info, header);
-			api->serialize_unlock();
 		} else {
 			/*
 			 * Overload, tell library to retry
@@ -741,6 +741,9 @@ static void *pthread_ipc_consumer (void *conn)
 		}
 
 		api->sending_allowed_release (conn_info->sending_allowed_private_data);
+
+		api->serialize_unlock();
+
 		coroipcs_refcount_dec (conn);
 	}
 	pthread_exit (0);
-- 
1.7.1

